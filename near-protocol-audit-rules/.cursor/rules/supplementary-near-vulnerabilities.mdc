---
description: 
globs: 
alwaysApply: false
---
# Blockchain Files Guide

This rule provides guidance for locating and understanding blockchain-related files in the codebase.

## Search Patterns for Blockchain Files

### Ethereum/Solidity Patterns
- `contract ` - Solidity smart contract declarations
- `pragma solidity` - Solidity version declarations
- `ethers.Contract` - JS/TS contract interactions using ethers.js
- `web3` - Web3.js library usage
- `function transfer` - Common ERC-20/token function
- `await contract.` - Contract method calls

### NEAR Protocol Patterns
- `near_bindgen` - Macro for NEAR Rust contracts
- `near-api-js` - JavaScript SDK for NEAR
- `near-sdk-rs` or `near-sdk-as` - NEAR contract SDKs
- `signAndSendTransaction` - NEAR transaction signing
- `WalletConnection` - NEAR wallet connector
- `wasm` or `WebAssembly` - NEAR contracts compile to WASM
- `LookupMap` - NEAR SDK collection type
- `UnorderedMap` - NEAR SDK collection type
- `TreeMap` - NEAR SDK collection type
- `LazyOption` - NEAR SDK for rarely used "big data"
- `#[init]` - NEAR contract initialization function
- `#[payable]` - NEAR function that can receive tokens
- `env::predecessor_account_id()` - NEAR function to get caller ID
- `Promise` - NEAR cross-contract calls
- `cross_contract_call` - NEAR protocol function
- `Borsh` - Serialization format used in NEAR
- `serde` - Serialization/deserialization for NEAR contracts

### General Blockchain Patterns
- `wallet` - Wallet interactions
- `privateKey` - Cryptographic keys
- `signature` - Transaction/message signing
- `RPC` or `rpcUrl` - Node connection information

## NEAR Smart Contract Architecture

NEAR smart contracts are compiled to WebAssembly (WASM) and can be written in:
- Rust (most common, using near-sdk-rs)
- AssemblyScript (using near-sdk-as)
- Solidity (via Aurora EVM)
- JavaScript (via JS-VM)

Key architectural components in NEAR contracts:
- Contracts are micro-services containing data and executable code
- Cross-contract interactions are performed asynchronously via Promises
- Sharded architecture requires careful handling of cross-contract calls
- Collection types are tied to storage and require proper synchronization

## Common NEAR-specific Vulnerabilities

When auditing NEAR files, look for:
- Access control issues (incorrect admin/user authorization)
- Lost/stolen assets (funds being stuck or sent to wrong accounts)
- DoS due to logical issues (deadlocks, state machine errors)
- DoS due to technical issues (Out-of-Gas errors)
- Reentrancy and insecure cross-contract calls
- Arithmetic issues (overflow, underflow, rounding)
- Incorrect Near SDK usage
- Collection synchronization issues
- "Million cheap data additions" attack vectors
- Unsafe Rust blocks (major red flag)

## NEAR Audit Tools

Tools for analyzing NEAR contracts:
- Cargo Geiger - Displays statistics about unsafe Rust code usage
- Cargo Audit - Checks for crates with security vulnerabilities
- Clippy - Static analyzer to catch common Rust mistakes
- Cargo Tarpaulin - Test coverage tool
- Valgrind - For memory-related issues (rarely needed unless unsafe blocks present)

## Key Blockchain Files

### EVM/Ethereum Files
- [contracts/contracts/AITradingAgent.sol](mdc:contracts/contracts/AITradingAgent.sol) - Trading agent contract
- [contracts/contracts/DEX.sol](mdc:contracts/contracts/DEX.sol) - DEX implementation
- [eigenlayer/eigenlayer-portfoliotask-avs/operator/index.ts](mdc:eigenlayer/eigenlayer-portfoliotask-avs/operator/index.ts) - EigenLayer contract interactions

### NEAR Protocol Files (Boilerplate/Inactive)
- [eliza-agent/src/plugins/plugin-near/src/index.ts](mdc:eliza-agent/src/plugins/plugin-near/src/index.ts) - NEAR plugin (not loaded in runtime)
- [eliza-agent/src/character.ts](mdc:eliza-agent/src/character.ts) - References NEAR plugin
- [near-ai-agents/ref-finance-agent/src/types/index.ts](mdc:near-ai-agents/ref-finance-agent/src/types/index.ts) - NEAR contract references

### Frontend Integration
- [frontend/components/ui/navbar.tsx](mdc:frontend/components/ui/navbar.tsx) - Wallet connection UI

## Code Audit Findings

The repository contains:
1. Active Ethereum/EVM contracts and integrations
2. Inactive NEAR Protocol components (primarily boilerplate)
3. Limited frontend blockchain integration
