---
description: 
globs: 
alwaysApply: false
---
# NEAR Protocol Integration Audit Guide

This rule provides guidance for conducting comprehensive audits of NEAR Protocol integration in applications.

## Key Areas to Examine

### 1. Smart Contract Features
- **NEP Standards Implementation**
  - Look for NEP-141 (Fungible Token) functions like `ft_transfer`, `ft_balance_of`, and storage management
  - Check for NEP-171 (Non-Fungible Token) if relevant
  - Verify NEP-145 (Storage Management) implementation for storage deposits
  
- **Cross-Contract Calls**
  - Identify usage of `Promise`, `ext_contract`, or cross-contract call patterns
  - Examine promise chaining and callback handling

- **Payable Methods**
  - Check for proper handling of `attached_deposit` in payable methods
  - Verify minimum deposit requirements and validation

- **Access Control**
  - Identify owner-only, admin-only, or contract-only actions
  - Check for predecessor_account validation for sensitive operations

### 2. Frontend Integration
- **Wallet Selector Implementation**
  - Look for `@near-wallet-selector` packages and setup
  - Check proper use of wallet selector hooks and components

- **Transaction Submission**
  - Examine `signAndSendTransaction` or equivalent calls
  - Verify gas estimation and attached deposit handling
  - Check transaction result handling and error states

- **Contract Call Patterns**
  - Look for `viewFunction` and `callFunction` (or equivalent) for read/write operations
  - Verify argument formatting and result parsing for contract calls

### 3. Backend Integration
- **Transaction Preparation**
  - Check for code that prepares transaction payloads without signing
  - Identify proper network ID and contract ID handling

- **Wallet URL Handling**
  - Look for wallet URL generation for transaction signing redirects
  - Verify support for multiple wallet types (MyNEARWallet, Sender, etc.)

- **Smart Contract Testing**
  - Check for unit tests that verify contract functionality
  - Look for simulation of contract calls in test code

## Scoring Guidelines

Score the integration from 0-20 based on:

- **16-20 pts**: Deep integration 
  - Uses multiple NEP standards
  - Implements cross-contract calls
  - Has robust error handling
  - Shows advanced patterns like Promise chaining or contract callbacks

- **10-15 pts**: Moderate integration
  - Basic contract calls work
  - Standard wallet connection
  - Some token functionality
  - May lack depth or advanced features

- **0-9 pts**: Minimal integration
  - Only basic wallet connection
  - Few or no actual contract calls
  - Missing key NEAR features

## Common File Patterns

When auditing, prioritize these file patterns:
- `*.near.js`, `*_near.js`, `near.js`, `near/*.js` for frontend integration
- Contract files: `*.ts`, `*.js` in contract directories
- `near-sdk-*` dependencies in package.json
- Backend files with "near" in the name or path

## Evaluation Process
1. First scan package.json for NEAR-related dependencies
2. Check for contract directories and contract code
3. Examine frontend for wallet integration and transaction submission
4. Check backend for transaction preparation code
5. Test for advanced features like cross-contract calls, if present
6. Evaluate overall integration depth and standard compliance
